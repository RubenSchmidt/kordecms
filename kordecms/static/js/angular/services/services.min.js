kordeCms.factory("ArticleFactory",["$http","apiUrl",function($http,apiUrl){var endpoint=apiUrl+"/articles";return{get:get,list:list,create:create,update:update,destroy:destroy,count:count};function get(id){return $http.get(endpoint+"/"+id)}function list(){return $http.get(endpoint)}function create(article){return $http.post(endpoint,article)}function update(article){return $http.put(endpoint+"/"+article.id,article)}function destroy(id){return $http.delete(endpoint+"/"+id)}function count(){return $http.get(endpoint+"/count")}}]);kordeCms.factory("AuthService",["$q","$timeout","$http","$cookies",function($q,$timeout,$http,$cookies){var user=null;return{isLoggedIn:isLoggedIn,getUserStatus:getUserStatus,login:login,logout:logout,getAuthStatus:getAuthStatus};function isLoggedIn(){return!!user}function getUserStatus(){return user}function getAuthStatus(){var deferred=$q.defer();if($cookies.get("token")){$http.defaults.headers.common.Authorization="JWT "+$cookies.get("token");$http.post("/api/api-token-verify/",{token:$cookies.get("token")}).then(function(response){user=true;deferred.resolve()},function(response){deferred.reject(response)})}else{deferred.reject("No token")}return deferred.promise}function login(username,password){var deferred=$q.defer();$http.post("/api/api-token-auth/",{username:username,password:password}).then(function(response){if(response.status===200&&response.data.token){user=true;$http.defaults.headers.common.Authorization="JWT "+response.data.token;$cookies.put("token",response.data.token);deferred.resolve(response)}else{user=false;deferred.reject(response)}},function(response){user=false;deferred.reject(response)});return deferred.promise}function logout(){user=false;delete $http.defaults.headers.common.Authorization;$cookies.remove("token")}}]);kordeCms.factory("GlobalEditorService",["$rootScope","ArticleFactory","PageFactory",function($rootScope,ArticleFactory,PageFactory){return $rootScope.$on("rootScope:doneEditing",function(event,data){switch(data.class_type){case"Article":ArticleFactory.update(data).then(function(response){},function(response){console.log(response)});break;case"PageElement":if(data.type===1){PageFactory.update(data).then(function(response){},function(response){console.log(response)})}}})}]);kordeCms.factory("PageElementFactory",["$http","Upload","apiUrl",function($http,Upload,apiUrl){var endpoint=apiUrl+"/pageelements";return{get:get,update:update,updateImageElement:updateImageElement};function get(id){return $http.get(endpoint+"/"+id)}function update(element){return $http.put(endpoint+"/"+element.id,element)}function updateImageElement(element,file){return Upload.upload({url:endpoint+"/"+element.id,method:"PUT",data:element,file:file})}}]);kordeCms.factory("PageFactory",["$http","Upload","apiUrl",function($http,Upload,apiUrl){var endpoint=apiUrl+"/pages";return{get:get,list:list,listElements:listElements,create:create,update:update,updateImageElement:updateImageElement,destroy:destroy};function get(pageslug){return $http.get(endpoint+"/"+pageslug)}function list(){return $http.get(endpoint)}function listElements(pageslug){return $http.get(endpoint+"/"+pageslug+"/"+"elements")}function create(user){return $http.post(endpoint,user)}function update(pageslug,page){return $http.put(endpoint+"/"+pageslug,page)}function updateImageElement(file,elementId,elementRow,pageId){return Upload.upload({url:endpoint+"/elements/"+elementId,method:"PUT",data:{id:elementId,type:0,row:elementRow,page:pageId},file:file})}function destroy(pageslug){return $http.delete("/pages/"+pageslug)}}]);kordeCms.factory("SweetAlert",["$timeout","$window",function($timeout,$window){var swal=$window.swal;var self=function(arg1,arg2,arg3){$timeout(function(){if(typeof arg2==="function"){swal(arg1,function(isConfirm){$timeout(function(){arg2(isConfirm)})},arg3)}else{swal(arg1,arg2,arg3)}})};var props={swal:swal,adv:function(object){$timeout(function(){swal(object)})},timed:function(title,message,type,time){$timeout(function(){swal({title:title,text:message,type:type,timer:time})})},success:function(title,message){$timeout(function(){swal(title,message,"success")})},error:function(title,message){$timeout(function(){swal(title,message,"error")})},warning:function(title,message){$timeout(function(){swal(title,message,"warning")})},info:function(title,message){$timeout(function(){swal(title,message,"info")})}};angular.extend(self,props);return self}]);kordeCms.factory("UserFactory",["$http","apiUrl",function($http,apiUrl){var endpoint=apiUrl+"/users";return{get:get,list:list,create:create,update:update,destroy:destroy,currentUser:currentUser,updatePassword:updatePassword};function get(id){return $http.get(endpoint+"/"+id)}function list(){return $http.get(endpoint)}function create(user){return $http.post(endpoint,user)}function update(user){return $http.put(endpoint+"/"+user.id,user)}function updatePassword(user){return $http.put(endpoint+"/"+user.id,user)}function destroy(id){return $http.delete(endpoint+"/"+id)}function currentUser(){return $http.get(endpoint+"/current-user")}}]);